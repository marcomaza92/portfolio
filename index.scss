// Map to define all the colors you want
$colors: (
  // Chromatic
  black: #000000,
  white: #FFFFFF,
  // Main
  purple: #3D0046,
  yellow: #D97F11,
  turquoise: #168C8C,
  green: #09470B
);

// Shades and Tints

// Trigger
$step: 0;
// $gap * $count must be an integer between 0 and 100
// Both $gap and $count must be integers
$gap: 5;
$count: 5;
// Check if you pay attention to the above conditions
@if $gap * $count >= 0 or $gap * $count <= 100 {
  $gap: $gap;
  $count: $count;
} @else {
  @error 'Out of range: $gap * $count must be an integer between 0 and 100';
}
// Define empty maps for the shades and tints
$shades: ();
$tints: ();
// Function to create shades
@function createShades($color-name, $color-value) {
  $shade: ();
  @for $i from 1 through $count {
    $step: $step + $gap;
    $temp-shade: (
      #{$color-name}-shade-#{$i}: darken($color-value, $step)
    );
    $shade: map-merge($shade, $temp-shade);
  }
  @return $shade;
}
// Function to create tints
@function createTints($color-name, $color-value) {
  $tint: ();
  @for $i from 1 through $count {
    $step: $step + $gap;
    $temp-tint: (
      #{$color-name}-tint-#{$i}: lighten($color-value, $step)
    );
    $tint: map-merge($tint, $temp-tint);
  }
  @return $tint;
}
// Loop to iterate all the colors and call functions
@each $color-name, $color-value in $colors {
  $current-temp-shade: ();
  $current-temp-tint: ();

  $current-shade: createShades($color-name, $color-value);
  $current-temp-shade: (
    #{$color-name}-shades: $current-shade
  );
  $shades: map-merge($shades, $current-temp-shade);

  $current-tint: createTints($color-name, $color-value);
  $current-temp-tint: (
    #{$color-name}-tints: $current-tint
  );
  $tints: map-merge($tints, $current-temp-tint);
}
// Debug your results in the console (uncomment below)
// @debug $shades;
// @debug $tints;
// Use this function to get values recursively inside a map
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

// Fonts

// Usually 1rem = 16px in most of the browsers according to the UA stylesheet. However this can be changed by the user in theirs browsers options.
$base: 1rem;

$fonts: ();
// Below arrays are for you to feel with your needs
$font-names: 'h6', 'h5', 'base', 'h3', 'h2', 'h1';
$font-sizes: 0.75, 0.875, 1, 1.5, 2, 2.5;
// Get the lengths of boths arrays
$font-names-length: length($font-names);
$font-sizes-length: length($font-sizes);
// Check if the length are equal
@if $font-names-length == $font-sizes-length {
  // Loop the map with the font-names length
  @for $i from 1 through $font-names-length {
    $current-name: nth($font-names, $i);
    $current-size: nth($font-sizes, $i);
    $font-temp: (
      font-#{$current-name}: $base * $current-size
    );
    $fonts: map-merge($fonts, $font-temp);
  }
} @else {
  @error 'Lengths from $font-names and $font-sizes are not equal. They must be the same';
}
// Debug your results in the console (uncomment below)
// @debug $fonts;

// Paddings, Margins and Positions

$padding: 20px;
$margin: 20px;
$position: 20px;

// Reset

body {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}
* {
  font-family: 'Lato', sans-serif;
}
a {
  text-decoration: none;
  cursor: pointer;
}
button {
  width: 96px;
  height: 48px;
  border: 0;
  cursor: pointer;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0;
}
h1 {
  font-size: map-get($fonts, font-h1);
}
h2 {
  font-size: map-get($fonts, font-h2);
}
h3 {
  font-size: map-get($fonts, font-h3);
}
h4,
p,
a {
  font-size: map-get($fonts, font-base);
}
h5 {
  font-size: map-get($fonts, font-h5);
}
h6 {
  font-size: map-get($fonts, font-h6);
}
// Styles
.regular {
  font-style: normal;
}
.italic {
  font-style: italic;
}
.bold {
  font-weight: bold;
}
.colors {
  @each $color-name, $color-value in $colors {
    .#{$color-name} {
      @for $i from 1 through 11 {
        @if ($i <= 5) {
          span:nth-of-type(#{$i}) {
            background: map-deep-get($shades, #{$color-name}-shades, #{$color-name}-shade-#{6 - $i});
          }
        }
        @if ($i == 6) {
          span:nth-of-type(6) {
            background: map-get($colors, $color-name);
          }
        }
        @if ($i >= 7) {
          span:nth-of-type(#{$i}) {
            background: map-deep-get($tints, #{$color-name}-tints, #{$color-name}-tint-#{$i - 6});
          }
        }
      }
    }
  }
}
.buttons {
  &.primary {
    background: map-get($colors, black);
    color: map-get($colors, white);
    transition: 0.25s all ease-in-out;
    &:hover,
    &:focus {
      background: map-deep-get($tints, black-tints, black-tint-5);
      color: map-get($colors, white);
    }
  }
  &.secondary {
    background: map-get($colors, white);
    color: map-get($colors, black);
    transition: 0.25s all ease-in-out;
    &:hover,
    &:focus {
      background: map-deep-get($shades, white-shades, white-shade-5);
      color: map-get($colors, black);
    }
  }
}
.links {
  &.primary {
    color: map-get($colors, black);
    transition: 0.25s all ease-in-out;
    &:hover,
    &:focus {
      color: map-deep-get($tints, black-tints, black-tint-5);
    }
    &:visited {
      color: map-deep-get($shades, turquoise-shades, turquoise-shade-1);
      transition: 0.25s all ease-in-out;
      &:hover {
        color: map-deep-get($tints, turquoise-tints, turquoise-tint-5);
      }
    }
  }
  &.secondary {
    color: map-get($colors, white);
    transition: 0.25s all ease-in-out;
    &:hover,
    &:focus {
      color: map-deep-get($shades, white-shades, white-shade-5);
    }
    &:visited {
      color: map-deep-get($tints, turquoise-tints, turquoise-tint-1);
      transition: 0.25s all ease-in-out;
      &:hover {
        color: map-deep-get($tints, turquoise-tints, turquoise-tint-5);
      }
    }
  }
}
img {
  width: 100%;
}
header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  padding: $padding 0;
  background: map-get($colors, black);
  * {
    color: map-get($colors, white);
  }
  h1 {
    float: left;
    width: calc(80% - #{$margin});
    margin-left: $margin;
  }
  #menu-open {
    display: inline-block;
    width: calc(20% - #{$margin});
    margin-right: $margin;
    text-align: right;
    font-size: map-get($fonts, font-h1);
  }
  nav {
    clear: both;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    background: rgba(map-get($colors, black), 0.9);
    #menu-close {
      position: absolute;
      top: $position;
      right: $position;
      font-size: map-get($fonts, font-h1);
    }
    ul {
      list-style: none;
      margin-top: calc(2 * (#{$margin} + #{map-get($fonts, font-h1)}));
      li {
        margin-top: calc(2 * #{$margin});
        a,
        button {
          font-size: map-get($fonts, font-h2);
        }
        button {
          width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});
        }
      }
    }
  }
  nav.close {
    display: none;
  }
}
main {
  margin-top: calc((2 * #{$margin}) + #{map-get($fonts, font-h1)} + #{$margin});
}
.menu {
  display: block;
  position: relative;
  top: calc((-1) * ((2 * #{$margin}) + #{map-get($fonts, font-h1)} + #{$margin}));
  visibility: hidden;
}
.about {
  margin: $margin;
}
.work {
  background: map-deep-get($shades, white-shades, white-shade-2);
  padding: $padding;
  margin: $margin 0;
  & > * {
    img {
      margin: $margin 0;
    }
    a {
      display: block;
      width: 100%;
      text-align: right;
      margin: $margin 0;
    }
    a:first-of-type {
      margin: 0;
    }
  }
}
.knowledge {
  margin: $margin;
  span {
    display: inline-block;
    margin: calc(#{$margin} / 2) 0;
    margin-right: calc(#{$margin} / 4);
    padding: $padding;
    background: rgba(map-deep-get($shades, white-shades, white-shade-2), 0.8);
  }
}
.contact {
  background: map-deep-get($shades, white-shades, white-shade-2);
  padding: $padding;
  margin: $margin 0;
  h1 {
    margin-bottom: calc(2 * #{$margin});
  }
  button {
    display: block;
    margin: 0 auto;
    margin-top: calc(2 * #{$margin});
  }
}
footer {
  text-align: center;
}

// Media Queries - Bootstrap 4 | Mobile First

// Extra small devices (portrait phones, less than 576px)
// No media query since this is the default in Bootstrap

// Small devices (landscape phones, 576px and up)

// Some IPhones have smaller resolution than 576px, hence this hack
@media (orientation: landscape) and (max-width: 575px),
(min-width: 576px) {
  header {
    nav {
      ul {
        margin-top: calc(#{$margin} + #{map-get($fonts, font-h1)});
        margin-left: calc(2 * #{$margin});
        li {
          display: inline-block;
          width: calc(50% - #{$margin});
          text-align: center;
          &:last-of-type {
            width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});
          }
        }
      }
    }
  }
}
// Medium devices (tablets, 768px and up)
@media (min-width: 768px) {

  $margin: 40px;
  $padding: 40px;
  $position: 40px;

  header {
    padding: $padding 0;
    h1 {
      width: calc(80% - #{$margin});
      margin-left: $margin;
    }
    #menu-open {
      width: calc(20% - #{$margin});
      margin-right: $margin;
    }
    nav {
      #menu-close {
        top: $position;
        right: $position;
      }
      ul {
        margin-top: calc(2 * (#{$margin} + #{map-get($fonts, font-h1)}));
        margin-left: calc(2 * (#{$margin} + #{map-get($fonts, font-h1)}));
        li {
          text-align: left;
          width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});
          margin-top: calc(2 * #{$margin});
          &:last-of-type {
            width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});
          }
          button {
            width: calc(75% - #{$margin} - #{map-get($fonts, font-h1)});
          }
        }
      }
    }
    nav.close {
      display: none;
    }
  }
  main {
    margin-top: calc((2 * #{$margin}) + #{map-get($fonts, font-h1)} + #{$margin});
  }
  .menu {
    top: calc((-1) * ((2 * #{$margin}) + #{map-get($fonts, font-h1)} + #{$margin}));
  }
  .about {
    display: grid;
    grid-template-columns: 50% 50%;
    grid-template-rows: 50% 50%;
    margin: $margin;
    h1 {
      grid-column: 1 / 3;
      margin-bottom: $margin;
    }
    p:first-of-type {
      margin-right: calc(#{$margin / 2});
    }
    p:last-of-type {
      margin-left: calc(#{$margin / 2});
    }
  }
  .work {
    display: grid;
    grid-template-columns: 50% 50%;
    grid-template-rows: 50% 50%;
    padding: $padding;
    margin: $margin 0;
    h1 {
      grid-column: 1 / 3;
      margin-bottom: calc(#{$margin} / 2);
    }
    & > * {
      &:first-of-type:not(h1) {
        margin-right: $margin;
      }
      &:last-of-type:not(h1) {
        margin-left: $margin;
      }
      img {
        margin: calc(#{$margin / 2}) 0;
      }
      a {
        margin: $margin 0;
      }
    }
  }
  .knowledge {
    margin: $margin;
    span {
      margin: calc(#{$margin} / 2) 0;
      margin-right: calc(#{$margin} / 4);
      padding: $padding;
    }
  }
  .contact {
    padding: $padding;
    margin: $margin 0;
    h1 {
      margin-bottom: calc(2 * #{$margin});
    }
    p {
      margin: $margin 0;
    }
    button {
      display: block;
      margin-left: calc(100% - 96px);
      margin-top: $margin;
    }
  }
  footer {
    margin: auto $margin;
    text-align: left;
  }
}

// Large devices (desktops, 992px and up)

@media (min-width: 992px) {
  header {
    nav {
      ul {
        margin-top: calc(2 * (#{$margin} + #{map-get($fonts, font-h1)}));
        margin-left: calc(2 * #{$margin});
        li {
          display: inline-block;
          width: calc(50% - #{$margin});
          text-align: center;
          &:last-of-type {
            width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});
          }
        }
      }
    }
  }
}

// Some IPads have bigger resolution than 1024px in portrait, hence this hack
@media (orientation: portrait) and (min-width: 992px) {
  $margin: 40px;
  $padding: 40px;
  $position: 40px;

  header {
    padding: $padding 0;
    h1 {
      width: calc(80% - #{$margin});
      margin-left: $margin;
    }
    #menu-open {
      width: calc(20% - #{$margin});
      margin-right: $margin;
    }
    nav {
      #menu-close {
        top: $position;
        right: $position;
      }
      ul {
        margin-top: calc(2 * (#{$margin} + #{map-get($fonts, font-h1)}));
        margin-left: calc(2 * (#{$margin} + #{map-get($fonts, font-h1)}));
        li {
          text-align: left;
          width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});
          margin-top: calc(2 * #{$margin});
          &:last-of-type {
            width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});
          }
          button {
            width: calc(75% - #{$margin} - #{map-get($fonts, font-h1)});
          }
        }
      }
    }
    nav.close {
      display: none;
    }
  }
}

// Extra large devices (large desktops, 1200px and up)
@media (min-width: 1200px) {
  header {
    position: relative;
    padding: $padding 0;
    h1 {
      width: calc(20% - #{$margin});
      margin-left: $margin;
    }
    #menu-open {
      display: none;
    }
    nav {
      position: initial;
      background: transparent;
      #menu-close {
        display: none;
      }
      ul {
        display: inline;
        list-style: none;
        margin-left: 0;
        li {
          margin-top: 0;
          width: calc(16% - #{$margin});
          &:last-of-type {
            width: calc(16% - #{$margin});
          }
          a,
          button {
            font-size: map-get($fonts, font-base);
          }
          button {
            width: 100%;
          }
        }
      }
    }
    nav.close {
      display: initial;
    }
  }
  main {
    margin-top: 0;
    display: grid;
    grid-template-columns: 50% 50%;
    grid-template-rows: calc(50vh - #{map-get($fonts, font-h1)} - (2 * #{$margin}) + (4 * #{map-get($fonts, font-base)})) calc(50vh - #{map-get($fonts, font-h1)} - (2 * #{$margin}) + (4 * #{map-get($fonts, font-base)}));
  }
  .menu {
    display: none;
  }
  .about {
    padding: $padding;
    margin: 0;
    grid-template-columns: 33.33% 33.33% 33.33%;
    grid-template-rows: 30% 35% 35%;
    p {
      grid-column: 1 / 3;
      margin-left: $margin;
      &:first-of-type,
      &:last-of-type {
        margin: 0;
      }
    }
  }
  .work {
    background: map-deep-get($shades, white-shades, white-shade-2);
    padding: $padding;
    margin: 0;
    grid-template-columns: 25% 25% 25% 25%;
    grid-template-rows: 20% 80%;
    h1 {
      grid-column: 1 / 5;
    }
    & > * {
      &:first-of-type:not(h1),
      &:last-of-type:not(h1) {
        margin: 0;
        margin-right: $margin;
      }
      a {
        display: inline;
      }
      img {
        height: 130px;
        margin: $margin 0;

      }
      p,
      a:last-of-type {
        display: none;
      }
    }
  }
  .knowledge {
    background: map-deep-get($shades, white-shades, white-shade-2);
    padding: $padding;
    margin: 0;
    span {
      display: inline-block;
      margin: calc(#{$margin} / 2) 0;
      margin-right: calc(#{$margin} / 4);
      padding: $padding;
      background: rgba(map-get($colors, white), 0.8);
    }
  }
  .contact {
    background: transparent;
    padding: $padding;
    margin: 0;
    h1 {
      margin-bottom: $margin;
    }
    p {
      margin: $margin 0;
    }
    button {
      display: block;
      margin: 0;
      margin-left: calc(100% - 96px - #{$margin});
      margin-top: calc(2 * #{$margin});
    }
  }
  footer {
    position: absolute;
    bottom: calc(0px + (2 * #{map-get($fonts, font-base)}));
    left: calc(50% - #{$margin});
    text-align: left;
  }
}
