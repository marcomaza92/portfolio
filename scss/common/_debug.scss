// File: Debug
// Author: Marco Maza
// Version: 1.0.0
// License: MIT

// Variables
$line-break: "\A";
$comma: ",";
$colon: ":";
$space: " ";
$tab: "  "; // Tab = Space * 2
$pipe: "|";
$dash: "-";
$parenthesis-open: "(";
$parenthesis-close: ")";
$start: "====================  SCSS Debugger  ====================";
$hi: "Debugger says:";
$end: "====================  End of SCSS Debugger  ====================";
// Functions
@function digging($thing, $times) {
  $content: "";
  $separator: "";
  @for $i from 1 through $times {
    $separator: $separator + $tab + $space;
    @if ($i == $times) {
      $separator: $separator + $pipe + $dash;
    } @else {
      $separator: $separator + $pipe;
    }
  }
  @each $key, $value in $thing {
    $content:
      $content + $line-break + $separator;
    @if (type-of($value) == "map") {
      $content:
        $content +
        $parenthesis-open + type-of($value) + $parenthesis-close + $space +
        inspect($key) + $colon + $space + digging($value, $times + 1);
    } @else {
      $content:
        $content +
        $parenthesis-open + type-of($value) + $parenthesis-close + $space +
        inspect($key) + $colon + $space + inspect($value);
    }
  }
  @return $content;
}
@function debugger($thing, $times: 1) {
  $type: "Type: " + type-of($thing);
  $length: "Length: " + length($thing);
  $depth: "Depth: " + depth($thing);
  $content: "Content: ";
  @if (type-of($thing) == "map") {
    $content:
      $content + digging($thing, $times) +
      $line-break + $tab + $space +
      "--------------------------------------------------";
  } @else {
    $content:
      $content + $parenthesis-open + type-of($thing) + $parenthesis-close + $space + inspect($thing);
  }
  $result:
    $line-break + $line-break + $start + $line-break + $line-break +
    $hi + $line-break + $line-break +
    $tab + $type + $line-break +
    $tab + $length + $line-break +
    $tab + $depth + $line-break +
    $tab + $content + $line-break +
    $line-break + $end + $line-break;
  @return $result;
}
// Data types
$null: null;
$boolean: true;
$number: 42;
$string: "I'm a string!";
$color: #BADA55;
$list: "I'm", "a", "list", "!";
$map: (
  key-11: value-11,
  key-12: (
    key-21: value-21,
    key-22: (
      key-31: value-31,
      key-32: (
        key-41: value-41,
        key-42: value-42
      ),
      key-33: value-33
    ),
    key-23: (
      key-33: value-33
    )
  )
);
// Empty Data types
$empty-string: "";
$empty-list: [];
$empty-map: ();
// Try it!
// @debug debugger($number);
// @debug debugger($map);
// Framework Variables
// @debug debugger($colors);
// @debug debugger($shades);
// @debug debugger($tints);
