{"version":3,"sources":["_reset.scss","index.scss","_colors.scss","_variables.scss","_fonts.scss"],"names":[],"mappings":"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","file":"../index.css","sourcesContent":["// Reset\n\nbody {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n* {\n  font-family: 'Lato', sans-serif;\n}\na {\n  text-decoration: none;\n  cursor: pointer;\n}\nbutton {\n  width: 96px;\n  height: 48px;\n  border: 0;\n  cursor: pointer;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0;\n}\nh1 {\n  font-size: map-get($fonts, font-h1);\n}\nh2 {\n  font-size: map-get($fonts, font-h2);\n}\nh3 {\n  font-size: map-get($fonts, font-h3);\n}\nh4,\np,\na {\n  font-size: map-get($fonts, font-base);\n}\nh5 {\n  font-size: map-get($fonts, font-h5);\n}\nh6 {\n  font-size: map-get($fonts, font-h6);\n}\n","@import \"variables\";\n@import \"utilities\";\n\n@import \"reset\";\n\n@import \"colors\";\n@import \"fonts\";\n@import \"spacing\";\n\n// @import \"debug\";\n\n// Styles\n.regular {\n  font-style: normal;\n}\n.italic {\n  font-style: italic;\n}\n.bold {\n  font-weight: bold;\n}\n.colors {\n  @each $color-name, $color-value in $colors {\n    .#{$color-name} {\n      @for $i from 1 through 11 {\n        @if ($i <= 5) {\n          span:nth-of-type(#{$i}) {\n            background: map-deep-get($shades, #{$color-name}-shades, #{$color-name}-shade-#{6 - $i});\n          }\n        }\n        @if ($i == 6) {\n          span:nth-of-type(6) {\n            background: map-get($colors, $color-name);\n          }\n        }\n        @if ($i >= 7) {\n          span:nth-of-type(#{$i}) {\n            background: map-deep-get($tints, #{$color-name}-tints, #{$color-name}-tint-#{$i - 6});\n          }\n        }\n      }\n    }\n  }\n}\n.buttons {\n  &.primary {\n    background: map-get($colors, black);\n    color: map-get($colors, white);\n    transition: 0.25s all ease-in-out;\n    &:hover,\n    &:focus {\n      background: map-deep-get($tints, black-tints, black-tint-5);\n      color: map-get($colors, white);\n    }\n  }\n  &.secondary {\n    background: map-get($colors, white);\n    color: map-get($colors, black);\n    transition: 0.25s all ease-in-out;\n    &:hover,\n    &:focus {\n      background: map-deep-get($shades, white-shades, white-shade-5);\n      color: map-get($colors, black);\n    }\n  }\n}\n.links {\n  &.primary {\n    color: map-get($colors, black);\n    transition: 0.25s all ease-in-out;\n    &:hover,\n    &:focus {\n      color: map-deep-get($tints, black-tints, black-tint-5);\n    }\n    &:visited {\n      color: map-deep-get($shades, turquoise-shades, turquoise-shade-1);\n      transition: 0.25s all ease-in-out;\n      &:hover {\n        color: map-deep-get($tints, turquoise-tints, turquoise-tint-5);\n      }\n    }\n  }\n  &.secondary {\n    color: map-get($colors, white);\n    transition: 0.25s all ease-in-out;\n    &:hover,\n    &:focus {\n      color: map-deep-get($shades, white-shades, white-shade-5);\n    }\n    &:visited {\n      color: map-deep-get($tints, turquoise-tints, turquoise-tint-1);\n      transition: 0.25s all ease-in-out;\n      &:hover {\n        color: map-deep-get($tints, turquoise-tints, turquoise-tint-5);\n      }\n    }\n  }\n}\nimg {\n  width: 100%;\n}\nheader {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  padding: $padding 0;\n  background: map-get($colors, black);\n  * {\n    color: map-get($colors, white);\n  }\n  h1 {\n    float: left;\n    width: calc(80% - #{$margin});\n    margin-left: $margin;\n  }\n  #menu-open {\n    display: inline-block;\n    width: calc(20% - #{$margin});\n    margin-right: $margin;\n    text-align: right;\n    font-size: map-get($fonts, font-h1);\n  }\n  nav {\n    clear: both;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100vh;\n    background: rgba(map-get($colors, black), 0.9);\n    #menu-close {\n      position: absolute;\n      top: $position;\n      right: $position;\n      font-size: map-get($fonts, font-h1);\n    }\n    ul {\n      list-style: none;\n      margin-top: calc(2 * (#{$margin} + #{map-get($fonts, font-h1)}));\n      li {\n        margin-top: calc(2 * #{$margin});\n        a,\n        button {\n          font-size: map-get($fonts, font-h2);\n        }\n        button {\n          width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});\n        }\n      }\n    }\n  }\n  nav.close {\n    display: none;\n  }\n}\nmain {\n  margin-top: calc((2 * #{$margin}) + #{map-get($fonts, font-h1)} + #{$margin});\n}\n.menu {\n  display: block;\n  position: relative;\n  top: calc((-1) * ((2 * #{$margin}) + #{map-get($fonts, font-h1)} + #{$margin}));\n  visibility: hidden;\n}\n.about {\n  margin: $margin;\n}\n.work {\n  background: map-deep-get($shades, white-shades, white-shade-2);\n  padding: $padding;\n  margin: $margin 0;\n  & > * {\n    img {\n      margin: $margin 0;\n    }\n    a {\n      display: block;\n      width: 100%;\n      text-align: right;\n      margin: $margin 0;\n    }\n    a:first-of-type {\n      margin: 0;\n    }\n  }\n}\n.knowledge {\n  margin: $margin;\n  span {\n    display: inline-block;\n    margin: calc(#{$margin} / 2) 0;\n    margin-right: calc(#{$margin} / 4);\n    padding: $padding;\n    background: rgba(map-deep-get($shades, white-shades, white-shade-2), 0.8);\n  }\n}\n.contact {\n  background: map-deep-get($shades, white-shades, white-shade-2);\n  padding: $padding;\n  margin: $margin 0;\n  h1 {\n    margin-bottom: calc(2 * #{$margin});\n  }\n  button {\n    display: block;\n    margin: 0 auto;\n    margin-top: calc(2 * #{$margin});\n  }\n}\nfooter {\n  text-align: center;\n}\n\n// Media Queries - Bootstrap 4 | Mobile First\n\n// Extra small devices (portrait phones, less than 576px)\n// No media query since this is the default in Bootstrap\n\n// Small devices (landscape phones, 576px and up)\n\n// Some IPhones have smaller resolution than 576px, hence this hack\n@media (orientation: landscape) and (max-width: 575px),\n(min-width: 576px) {\n  header {\n    nav {\n      ul {\n        margin-top: calc(#{$margin} + #{map-get($fonts, font-h1)});\n        margin-left: calc(2 * #{$margin});\n        li {\n          display: inline-block;\n          width: calc(50% - #{$margin});\n          text-align: center;\n          &:last-of-type {\n            width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});\n          }\n        }\n      }\n    }\n  }\n}\n// Medium devices (tablets, 768px and up)\n@media (min-width: 768px) {\n\n  $margin: 40px;\n  $padding: 40px;\n  $position: 40px;\n\n  header {\n    padding: $padding 0;\n    h1 {\n      width: calc(80% - #{$margin});\n      margin-left: $margin;\n    }\n    #menu-open {\n      width: calc(20% - #{$margin});\n      margin-right: $margin;\n    }\n    nav {\n      #menu-close {\n        top: $position;\n        right: $position;\n      }\n      ul {\n        margin-top: calc(2 * (#{$margin} + #{map-get($fonts, font-h1)}));\n        margin-left: calc(2 * (#{$margin} + #{map-get($fonts, font-h1)}));\n        li {\n          text-align: left;\n          width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});\n          margin-top: calc(2 * #{$margin});\n          &:last-of-type {\n            width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});\n          }\n          button {\n            width: calc(75% - #{$margin} - #{map-get($fonts, font-h1)});\n          }\n        }\n      }\n    }\n    nav.close {\n      display: none;\n    }\n  }\n  main {\n    margin-top: calc((2 * #{$margin}) + #{map-get($fonts, font-h1)} + #{$margin});\n  }\n  .menu {\n    top: calc((-1) * ((2 * #{$margin}) + #{map-get($fonts, font-h1)} + #{$margin}));\n  }\n  .about {\n    display: grid;\n    grid-template-columns: 50% 50%;\n    grid-template-rows: 50% 50%;\n    margin: $margin;\n    h1 {\n      grid-column: 1 / 3;\n      margin-bottom: $margin;\n    }\n    p:first-of-type {\n      margin-right: calc(#{$margin / 2});\n    }\n    p:last-of-type {\n      margin-left: calc(#{$margin / 2});\n    }\n  }\n  .work {\n    display: grid;\n    grid-template-columns: 50% 50%;\n    grid-template-rows: 50% 50%;\n    padding: $padding;\n    margin: $margin 0;\n    h1 {\n      grid-column: 1 / 3;\n      margin-bottom: calc(#{$margin} / 2);\n    }\n    & > * {\n      &:first-of-type:not(h1) {\n        margin-right: $margin;\n      }\n      &:last-of-type:not(h1) {\n        margin-left: $margin;\n      }\n      img {\n        margin: calc(#{$margin / 2}) 0;\n      }\n      a {\n        margin: $margin 0;\n      }\n    }\n  }\n  .knowledge {\n    margin: $margin;\n    span {\n      margin: calc(#{$margin} / 2) 0;\n      margin-right: calc(#{$margin} / 4);\n      padding: $padding;\n    }\n  }\n  .contact {\n    padding: $padding;\n    margin: $margin 0;\n    h1 {\n      margin-bottom: calc(2 * #{$margin});\n    }\n    p {\n      margin: $margin 0;\n    }\n    button {\n      display: block;\n      margin-left: calc(100% - 96px);\n      margin-top: $margin;\n    }\n  }\n  footer {\n    margin: auto $margin;\n    text-align: left;\n  }\n}\n\n// Large devices (desktops, 992px and up)\n\n@media (min-width: 992px) {\n  header {\n    nav {\n      ul {\n        margin-top: calc(2 * (#{$margin} + #{map-get($fonts, font-h1)}));\n        margin-left: calc(2 * #{$margin});\n        li {\n          display: inline-block;\n          width: calc(50% - #{$margin});\n          text-align: center;\n          &:last-of-type {\n            width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});\n          }\n        }\n      }\n    }\n  }\n}\n\n// Some IPads have bigger resolution than 1024px in portrait, hence this hack\n@media (orientation: portrait) and (min-width: 992px) {\n  $margin: 40px;\n  $padding: 40px;\n  $position: 40px;\n\n  header {\n    padding: $padding 0;\n    h1 {\n      width: calc(80% - #{$margin});\n      margin-left: $margin;\n    }\n    #menu-open {\n      width: calc(20% - #{$margin});\n      margin-right: $margin;\n    }\n    nav {\n      #menu-close {\n        top: $position;\n        right: $position;\n      }\n      ul {\n        margin-top: calc(2 * (#{$margin} + #{map-get($fonts, font-h1)}));\n        margin-left: calc(2 * (#{$margin} + #{map-get($fonts, font-h1)}));\n        li {\n          text-align: left;\n          width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});\n          margin-top: calc(2 * #{$margin});\n          &:last-of-type {\n            width: calc(100% - #{$margin} - #{map-get($fonts, font-h1)});\n          }\n          button {\n            width: calc(75% - #{$margin} - #{map-get($fonts, font-h1)});\n          }\n        }\n      }\n    }\n    nav.close {\n      display: none;\n    }\n  }\n}\n\n// Extra large devices (large desktops, 1200px and up)\n@media (min-width: 1200px) {\n  header {\n    position: relative;\n    padding: $padding 0;\n    h1 {\n      width: calc(20% - #{$margin});\n      margin-left: $margin;\n    }\n    #menu-open {\n      display: none;\n    }\n    nav {\n      position: initial;\n      background: transparent;\n      #menu-close {\n        display: none;\n      }\n      ul {\n        display: inline;\n        list-style: none;\n        margin-left: 0;\n        li {\n          margin-top: 0;\n          width: calc(16% - #{$margin});\n          &:last-of-type {\n            width: calc(16% - #{$margin});\n          }\n          a,\n          button {\n            font-size: map-get($fonts, font-base);\n          }\n          button {\n            width: 100%;\n          }\n        }\n      }\n    }\n    nav.close {\n      display: initial;\n    }\n  }\n  main {\n    margin-top: 0;\n    display: grid;\n    grid-template-columns: 50% 50%;\n    grid-template-rows: calc(50vh - #{map-get($fonts, font-h1)} - (2 * #{$margin}) + (4 * #{map-get($fonts, font-base)})) calc(50vh - #{map-get($fonts, font-h1)} - (2 * #{$margin}) + (4 * #{map-get($fonts, font-base)}));\n  }\n  .menu {\n    display: none;\n  }\n  .about {\n    padding: $padding;\n    margin: 0;\n    grid-template-columns: 33.33% 33.33% 33.33%;\n    grid-template-rows: 30% 35% 35%;\n    p {\n      grid-column: 1 / 3;\n      margin-left: $margin;\n      &:first-of-type,\n      &:last-of-type {\n        margin: 0;\n      }\n    }\n  }\n  .work {\n    background: map-deep-get($shades, white-shades, white-shade-2);\n    padding: $padding;\n    margin: 0;\n    grid-template-columns: 25% 25% 25% 25%;\n    grid-template-rows: 20% 80%;\n    h1 {\n      grid-column: 1 / 5;\n    }\n    & > * {\n      &:first-of-type:not(h1),\n      &:last-of-type:not(h1) {\n        margin: 0;\n        margin-right: $margin;\n      }\n      a {\n        display: inline;\n      }\n      img {\n        height: 130px;\n        margin: $margin 0;\n\n      }\n      p,\n      a:last-of-type {\n        display: none;\n      }\n    }\n  }\n  .knowledge {\n    background: map-deep-get($shades, white-shades, white-shade-2);\n    padding: $padding;\n    margin: 0;\n    span {\n      display: inline-block;\n      margin: calc(#{$margin} / 2) 0;\n      margin-right: calc(#{$margin} / 4);\n      padding: $padding;\n      background: rgba(map-get($colors, white), 0.8);\n    }\n  }\n  .contact {\n    background: transparent;\n    padding: $padding;\n    margin: 0;\n    h1 {\n      margin-bottom: $margin;\n    }\n    p {\n      margin: $margin 0;\n    }\n    button {\n      display: block;\n      margin: 0;\n      margin-left: calc(100% - 96px - #{$margin});\n      margin-top: calc(2 * #{$margin});\n    }\n  }\n  footer {\n    position: absolute;\n    bottom: calc(0px + (2 * #{map-get($fonts, font-base)}));\n    left: calc(50% - #{$margin});\n    text-align: left;\n  }\n}\n","// Colors\n\n// Definition\n\n// Map with the colors of your choice.\n// Chromatic shold be left as is.\n// Main can be empty (i.e.: Chromatic colors == Main colors).\n$colors: (\n  // Chromatic\n  black: #000000,\n  white: #FFFFFF,\n  // Main\n  purple: #3D0046,\n  yellow: #D97F11,\n  turquoise: #168C8C,\n  green: #09470B\n);\n\n// Shades and Tints\n\n@function createShadesAndTints($color-name, $color-value) {\n  $shade: ();\n  $tint: ();\n  @for $i from 1 through $count {\n    // Fine Tune\n    $step: $step + $gap;\n    // Create shade\n    $temp-shade: (\n      #{$color-name}-shade-#{$i}: darken($color-value, $step)\n    );\n    $shade: map-merge($shade, $temp-shade);\n    // Create tint\n    $temp-tint: (\n      #{$color-name}-tint-#{$i}: lighten($color-value, $step)\n    );\n    $tint: map-merge($tint, $temp-tint);\n  }\n  // Return a list so we can do everything in one function\n  @return $shade, $tint;\n}\n// Iterate all the colors\n@each $color-name, $color-value in $colors {\n  $current-temp-shade: ();\n  $current-temp-tint: ();\n  // Call the function\n  $current-result: createShadesAndTints($color-name, $color-value);\n  // Parse the result from the function\n  $current-shade: nth($current-result, 1);\n  $current-tint: nth($current-result, 2);\n  // Add shade to its sub-map\n  $current-temp-shade: (\n    #{$color-name}-shades: $current-shade\n  );\n  // Add tint to its sub-map\n  $current-temp-tint: (\n    #{$color-name}-tints: $current-tint\n  );\n  // Add shade to its main-map\n  $shades: map-merge($shades, $current-temp-shade);\n  // Add tint to its main-map\n  $tints: map-merge($tints, $current-temp-tint);\n}\n","// Variables\n\n// Shades and Tints\n\n// Trigger\n$step: 0;\n// $gap * $count must be an integer between 0 and 100\n// Both $gap and $count must be integers\n$gap: 5;\n$count: 5;\n// Check if you pay attention to the above conditions\n@if $gap * $count >= 0 or $gap * $count <= 100 {\n  $gap: $gap;\n  $count: $count;\n} @else {\n  @error 'Out of range: $gap * $count must be an integer between 0 and 100';\n}\n// Empty maps for the shades and tints\n$shades: ();\n$tints: ();\n\n// Fonts\n\n// Usually 1rem = 16px in most of the browsers according to the UA stylesheet. However this can be changed by the user in theirs browsers options.\n$base: 1rem;\n// Below arrays are for you to feel with your needs\n$font-names: 'h6', 'h5', 'base', 'h3', 'h2', 'h1';\n$font-sizes: 0.75, 0.875, 1, 1.5, 2, 2.5;\n// Empty map for the fonts\n$fonts: ();\n\n// Paddings, Margins and Positions\n\n$padding: 20px;\n$margin: 20px;\n$position: 20px;\n","// Get the lengths of boths arrays\n$font-names-length: length($font-names);\n$font-sizes-length: length($font-sizes);\n// Check if the length are equal\n@if $font-names-length == $font-sizes-length {\n  // Loop the map with the font-names length\n  @for $i from 1 through $font-names-length {\n    $current-name: nth($font-names, $i);\n    $current-size: nth($font-sizes, $i);\n    $font-temp: (\n      font-#{$current-name}: $base * $current-size\n    );\n    $fonts: map-merge($fonts, $font-temp);\n  }\n} @else {\n  @error 'Lengths from $font-names and $font-sizes are not equal. They must be the same';\n}\n"]}